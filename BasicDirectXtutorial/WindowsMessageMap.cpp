#include"WindowsMessageMap.h"
#include<Windows.h>
#include<string>
#include<sstream>
#include<iomanip>

//secret messages
#define WM_UAHDESTROYWINDOW 0x0090
#define WM_UAHDRAWMENU 0x0091
#define WM_UAHDRAWMENUITEM 0x0092
#define WM_UAHINITMENU 0x0093
#define WM_UAHMEASUREMENUITEM 0x0094
#define WM_UAHNCPAINTMENUPOPUP 0x0095

#define REGISTER_MESSAGE(msg){msg,#msg}

WindowsMessageMap::WindowsMessageMap()
	:
	map({
	REGISTER_MESSAGE(WM_CREATE),
	REGISTER_MESSAGE(WM_DESTROY),
	REGISTER_MESSAGE(WM_QUIT),
	REGISTER_MESSAGE(WM_MOVE),
	REGISTER_MESSAGE(WM_SIZE),
	REGISTER_MESSAGE(WM_ACTIVATE),
	REGISTER_MESSAGE(WM_SETFOCUS),
	REGISTER_MESSAGE(WM_KILLFOCUS),
	REGISTER_MESSAGE(WM_ENABLE),
	REGISTER_MESSAGE(WM_SETREDRAW),
	REGISTER_MESSAGE(WM_SETTEXT),
	REGISTER_MESSAGE(WM_GETTEXT),
	REGISTER_MESSAGE(WM_GETTEXTLENGTH),

    // Keyboard messages
    REGISTER_MESSAGE(WM_KEYDOWN),
    REGISTER_MESSAGE(WM_KEYUP),
    REGISTER_MESSAGE(WM_CHAR),
    REGISTER_MESSAGE(WM_DEADCHAR),
    REGISTER_MESSAGE(WM_SYSKEYDOWN),
    REGISTER_MESSAGE(WM_SYSKEYUP),
    REGISTER_MESSAGE(WM_SYSCHAR),
    REGISTER_MESSAGE(WM_UNICHAR),

    // Mouse messages
    REGISTER_MESSAGE(WM_LBUTTONDOWN),
    REGISTER_MESSAGE(WM_LBUTTONUP),
    REGISTER_MESSAGE(WM_LBUTTONDBLCLK),
    REGISTER_MESSAGE(WM_RBUTTONDOWN),
    REGISTER_MESSAGE(WM_RBUTTONUP),
    REGISTER_MESSAGE(WM_RBUTTONDBLCLK),
    REGISTER_MESSAGE(WM_MBUTTONDOWN),
    REGISTER_MESSAGE(WM_MBUTTONUP),
    REGISTER_MESSAGE(WM_MBUTTONDBLCLK),
    REGISTER_MESSAGE(WM_MOUSEMOVE),
    REGISTER_MESSAGE(WM_MOUSEWHEEL),
    REGISTER_MESSAGE(WM_MOUSEHOVER),
    REGISTER_MESSAGE(WM_MOUSELEAVE),

    // Window messages
    REGISTER_MESSAGE(WM_CLOSE),
    REGISTER_MESSAGE(WM_SHOWWINDOW),
    REGISTER_MESSAGE(WM_WINDOWPOSCHANGING),
    REGISTER_MESSAGE(WM_WINDOWPOSCHANGED),
    REGISTER_MESSAGE(WM_GETMINMAXINFO),
    REGISTER_MESSAGE(WM_NCCREATE),
    REGISTER_MESSAGE(WM_NCDESTROY),
    REGISTER_MESSAGE(WM_NCLBUTTONDOWN),
    REGISTER_MESSAGE(WM_NCLBUTTONUP),
    REGISTER_MESSAGE(WM_NCLBUTTONDBLCLK),
    REGISTER_MESSAGE(WM_NCRBUTTONDOWN),
    REGISTER_MESSAGE(WM_NCRBUTTONUP),
    REGISTER_MESSAGE(WM_NCMOUSEMOVE),

    // Clipboard messages
    REGISTER_MESSAGE(WM_CUT),
    REGISTER_MESSAGE(WM_COPY),
    REGISTER_MESSAGE(WM_PASTE),
    REGISTER_MESSAGE(WM_CLEAR),
    REGISTER_MESSAGE(WM_UNDO),

    // System commands
    REGISTER_MESSAGE(WM_SYSCOMMAND),
    REGISTER_MESSAGE(WM_COMMAND),
    REGISTER_MESSAGE(WM_NOTIFY),

    // Painting and drawing
    REGISTER_MESSAGE(WM_PAINT),
    REGISTER_MESSAGE(WM_ERASEBKGND),
    REGISTER_MESSAGE(WM_PRINT),
    REGISTER_MESSAGE(WM_PRINTCLIENT),

    // Timer and idle messages
    REGISTER_MESSAGE(WM_TIMER),

    // Touch and pen input
    REGISTER_MESSAGE(WM_TOUCH),
    REGISTER_MESSAGE(WM_POINTERDOWN),
    REGISTER_MESSAGE(WM_POINTERUP),
    REGISTER_MESSAGE(WM_POINTERUPDATE),

    // Power management
    REGISTER_MESSAGE(WM_POWERBROADCAST),
    REGISTER_MESSAGE(WM_POWER),

    // Device and hardware messages
    REGISTER_MESSAGE(WM_DEVICECHANGE),
    REGISTER_MESSAGE(WM_INPUT),
    REGISTER_MESSAGE(WM_INPUT_DEVICE_CHANGE),
    REGISTER_MESSAGE(WM_HOTKEY),

    // DDE messages
    REGISTER_MESSAGE(WM_DDE_INITIATE),
    REGISTER_MESSAGE(WM_DDE_TERMINATE),
    REGISTER_MESSAGE(WM_DDE_ADVISE),
    REGISTER_MESSAGE(WM_DDE_UNADVISE),
    REGISTER_MESSAGE(WM_DDE_ACK),
    REGISTER_MESSAGE(WM_DDE_DATA),
    REGISTER_MESSAGE(WM_DDE_REQUEST),
    REGISTER_MESSAGE(WM_DDE_POKE),
    REGISTER_MESSAGE(WM_DDE_EXECUTE),

    // Miscellaneous
    REGISTER_MESSAGE(WM_SETCURSOR),
    REGISTER_MESSAGE(WM_GETICON),
    REGISTER_MESSAGE(WM_SETICON),
    REGISTER_MESSAGE(WM_DROPFILES),
    REGISTER_MESSAGE(WM_IME_SETCONTEXT),
    REGISTER_MESSAGE(WM_IME_NOTIFY),
    REGISTER_MESSAGE(WM_IME_CONTROL),
    REGISTER_MESSAGE(WM_IME_COMPOSITION),
    REGISTER_MESSAGE(WM_IME_ENDCOMPOSITION),
    REGISTER_MESSAGE(WM_IME_STARTCOMPOSITION),
    REGISTER_MESSAGE(WM_CONTEXTMENU),
    REGISTER_MESSAGE(WM_HELP),
    REGISTER_MESSAGE(WM_HSCROLL),
    REGISTER_MESSAGE(WM_VSCROLL),
    REGISTER_MESSAGE(WM_ACTIVATEAPP),
    REGISTER_MESSAGE(WM_CANCELMODE),
    REGISTER_MESSAGE(WM_CHILDACTIVATE),

    // User-defined messages
    REGISTER_MESSAGE(WM_APP),
    REGISTER_MESSAGE(WM_USER),

		}) 
{}

string WindowsMessageMap::operator()(DWORD msg, LPARAM lParam, WPARAM wParam) const
{
	constexpr int firstColWidth = 25;
	const auto i = map.find(msg);
	
	ostringstream oss;
	if (i != map.end()) {
		oss << left << setw(firstColWidth) << i->second << right;
	}
	else {
		ostringstream padss;
		padss << "Unknown Message: 0x" << hex << msg;
		oss << left << setw(firstColWidth) << padss.str() << right;

	}
	oss << "lParam:" << hex << setfill('0') << setw(8) << lParam;
	oss << "wParam:" << hex << setfill('0') << setw(8) << wParam;

	return oss.str();

}